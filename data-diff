#!/usr/bin/python3
import os
import statistics
import sys
import time

import clickhouse_driver

__version__ = '0.0.3'

tolerance = 0.01

def resolve(absolute):
    keys, values = list(absolute.keys()), list(absolute.values())
    zeroes = values.count(0)
    stdev = statistics.pstdev(values)
    mean = statistics.mean(values)

    if zeroes == len(absolute):
        return [0, '0 *']
    elif zeroes > 0:
        return [1, '0 ' + ','.join([shortname \
            for shortname, returned in absolute.items() if returned == 0])]
    elif stdev / mean > tolerance: # same tolerance used against std. dev. ...
        summary = []
        for shortname, returned in absolute.items():
            if returned < mean * (1 - tolerance): # ...and individual dev.
                summary += [shortname + '<M']
            elif returned > mean * (1 + tolerance):
                summary += [shortname + '>M']
        return [1, ','.join(summary)]
    else:
        absolute.keys()
        return [0, '='.join(keys)]

def diff(table, timestamp, traffic, now, interval, clusters):
    # TODO other per-cluster error handling
    absolute = {}
    for shortname, cluster in clusters.items():
        for (exists,) in cluster.execute('''
            SELECT count() FROM system.tables WHERE database = 'dist'
            AND name = '%s'
        ''' % table):
            break
        if exists != 1:
            returned = 0
        else:
            for (returned,) in cluster.execute('''
                WITH toStartOfHour(fromUnixTimestamp(%d)) AS start
                SELECT sum(%s) FROM dist.%s WHERE %s
                ''' % \
                (now, traffic, table, interval.format(timestamp=timestamp))):
                break
        absolute[shortname] = returned
    return resolve(absolute), absolute

def __main__():
    if len(sys.argv) != 6:
        print('''usage: data-diff CLUSTERS INTERVAL TABLE TIMESTAMP TRAFFIC

- CLUSTERS file line format: SHORT-NAME BOOTSTRAP-HOSTNAME (will add port 9000)
- INTERVAL is SQL syntax with `{t}' to be replaced with timestamp column name
- TABLE is taken from database `dist' and can use percent-style wildcard syntax
- TIMESTAMP and TRAFFIC are column names for filtering and aggregation, resp.
- output format: GOOD|BAD<TAB>SUMMARY<TAB>VALUES
''')
        sys.exit(2)
    clusters = {}
    now = time.time()
    with open(sys.argv[1]) as f:
        for line in f:
            split = line.strip().split(' ')
            if len(split) != 2:
                raise Exception('bad line: ' + line)
            clusters[split[0]] = clickhouse_driver.Client(
                host=split[1], port=9000, user='default', password='')

    interval, table, timestamp, traffic = sys.argv[2:6]
    (stat, summary), absolute = \
        diff(table, timestamp, traffic, now, interval, clusters)
    print('%s\t%s\t%s' % ('GOOD' if stat == 0 else 'BAD', summary, absolute))

__main__()
